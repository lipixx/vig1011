El vector del moviment que volem ha de ser
el vector perpendicular al Y de l'observador
i a l'Y de l'aplicació perquè l'objecte
es mogui damunt la base.
Vector movO = Yo ^ Ya

A més, volem que a efectes del que veu l'observador
l'objecte es mogui de dalt a baix en paral·lel
a l'Y d'observador quan movem el ratoli amunt i avall, i això és el mateix que es mogui en
perpendicular a X de l'observador.

Vector mov1= Ya * Xo

Només haurem d'agafar la pos que teniem i:

Vx = num. pixels que el rató s'ha despl. en X
Vy = num. pixels que el rató s'ha despl. en Y
(podem dividir aquest Vx i Vy amb algo per suavitzar)

posFinal = posActual + Vx * mov0 + Vy * mov1

A més, la Ya, sempre és 0,1,0 en aquesta pràctica.
Llavors la mov0 coincideix amb la Xobs.

També, en aquesta pràctica,
mov1 = (b,0,-a) essent b i a les Xobs=(a,0,b).


Recordem que la Modelview és així:

Xox Xoy Xoz 0
Yox Yoy Yoz 0
Zox Zoy Zoz 0
0   0   0   1

I per agafar els valors m[i]:
0: Xox  4: Xoy 8: Xoz  12: 0
1: Yox  5: Yoy 9: Yoz  13: 0
2: Zox  6: Zoy 10:Zoz  14: 0
3: 0    7: 0   11: 0   15: 0

//Recordem que la primera fila de Modelview és la X d'observador en coord. d'app.(X0,X1,X2)
//la segona fila és la Y d'observador (Y0,Y1,Y2)
//la tercera fila és la z d'observador (Z0,Z1,Z2)

#####################

Selecció per color fals:

1. Pintar tot el background negre
2. Pintar cada objecte amb el seu "id"
3. glReadPixels(X,Y,1,1,GL_RED,GL_UNSIGNED_BYTE,&pixel) (Y~= altura de la vista - pospixel) 

Si pixel = 0 hem pitjat a negre, al background.
Sino pixel val l'ID de l'objecte

(hem de tenir activat el zbuffer.. per defecte hi està)

4. Pintar en color la caixa de l'objecte seleccionat

--
RenderSelec-
	-> Back Buffer
	-> desactivar swap buffers

PaintG
	-> Swap buffers
	-> borrar backgr.
	-> scene.render
Pasar al render de l'objecte (i del model)  un booleà que digui si fem render de selecció
o no, allà pintarem la component g i b a 0, i la R = id de l'objecte.

#################### P3

1. Canviar tots els glColor per glMaterial.

glMaterialf(GL_FRONT_AND_BACK,{GL_AMBIENT,GL_DIFFUSE,GL_SPECULAR,GL_SHINENESS},

aqui també es pot passar amb un vector els valors, material.h té la gestió de materials
però hem de recordar que haurem de convertir el material que és una classe amb 3 colors,
a vector de 3 camps.

2. 
glEnable(GLLIGHTING)
glEnable(GL_LIGHT0)

openGL ignora després tot el que sigui glColor, i per tant només te en compte glMaterialfs.

3. La llum de l'escena és GL_LIGHT0 i la de camera és GL_LIGHT1.

El light0 està a l'eix de les Y, i només pot pujar i baixar per aquest eix.

-Per comprovar si la llum d'escena va bé, movem l'escena i no ha de canviar la il·luminació.
-Per comprovar si GL_LIGHT1 (de càmera) va bé, hem de rotar l'escena i comprovar que s'il·lumina
el que tenim al davant.
- (1,0,0,0) = llum direccional, (1,0,0,1) = llum posicional. (glLight() Parameter)

INFO
########
Backface culling is when OpenGL determines which faces are facing away from the viewer and are therefore unseen. Think of a cube. No matter how your rotate the cube, 3 faces will always be invisible. Figure out which faces these are, remove them from the list of polygons to be drawn and you just halved your drawing list.

Depth buffering is fairly simple. For every pixel of every polygon drawn, compare it's z value to the z buffer. if it's less than the value in the z buffer set the z buffer value as the new z buffer value. If not, discard the pixel. Depth buffering gives very good results but can be fairly slow as each and every pixel requires a value lookup.

In reality there is nothing similar between these two methods and they are often both used. Given a cube you can first cut out half the polygons using culling then draw them using z buffering.

Culling can cut down on the polygons rendered, but it's not a sorting algorithm. That's what Z buffering is.

Dibuixar un cub
################

/*
  glBegin(GL_QUADS);	// Start Drawing The Cube
  glColor3f(0.0f,1.0f,0.0f);	// Set The Color To Green
  glVertex3f( 1.0f, 2.0f,-1.0f);	// Top Right Of The Quad (Top)
  glVertex3f(-1.0f, 2.0f,-1.0f);	// Top Left Of The Quad (Top)
  glVertex3f(-1.0f, 2.0f, 1.0f);	// Bottom Left Of The Quad (Top)
  glVertex3f( 1.0f, 2.0f, 1.0f);	// Bottom Right Of The Quad (Top)
  glColor3f(1.0f,0.5f,0.0f);	// Set The Color To Orange
  glVertex3f( 1.0f,1.0f, 1.0f);	// Top Right Of The Quad (Bottom)
  glVertex3f(-1.0f,1.0f, 1.0f);	// Top Left Of The Quad (Bottom)
  glVertex3f(-1.0f,1.0f,-1.0f);	// Bottom Left Of The Quad (Bottom)
  glVertex3f( 1.0f,1.0f,-1.0f);	// Bottom Right Of The Quad (Bottom)
  glColor3f(1.0f,0.0f,0.0f);	// Set The Color To Red
  glVertex3f( 1.0f, 2.0f, 1.0f);	// Top Right Of The Quad (Front)
  glVertex3f(-1.0f, 2.0f, 1.0f);	// Top Left Of The Quad (Front)
  glVertex3f(-1.0f,1.0f, 1.0f);	// Bottom Left Of The Quad (Front)
  glVertex3f( 1.0f,1.0f, 1.0f);	// Bottom Right Of The Quad (Front)
  glColor3f(1.0f,1.0f,0.0f);	// Set The Color To Yellow
  glVertex3f( 1.0f,1.0f,-1.0f);	// Bottom Left Of The Quad (Back)
  glVertex3f(-1.0f,1.0f,-1.0f);	// Bottom Right Of The Quad (Back)
  glVertex3f(-1.0f, 2.0f,-1.0f);	// Top Right Of The Quad (Back)
  glVertex3f( 1.0f, 2.0f,-1.0f);	// Top Left Of The Quad (Back)
  glColor3f(0.0f,0.0f,1.0f);	// Set The Color To Blue
  glVertex3f(-1.0f, 2.0f, 1.0f);	// Top Right Of The Quad (Left)
  glVertex3f(-1.0f, 2.0f,-1.0f);	// Top Left Of The Quad (Left)
  glVertex3f(-1.0f,1.0f,-1.0f);	// Bottom Left Of The Quad (Left)
  glVertex3f(-1.0f,1.0f, 1.0f);	// Bottom Right Of The Quad (Left)
  glColor3f(1.0f,0.0f,1.0f);	// Set The Color To Violet
  glVertex3f( 1.0f, 2.0f,-1.0f);	// Top Right Of The Quad (Right)
  glVertex3f( 1.0f, 2.0f, 1.0f);	// Top Left Of The Quad (Right)
  glVertex3f( 1.0f,1.0f, 1.0f);	// Bottom Left Of The Quad (Right)
  glVertex3f( 1.0f,1.0f,-1.0f);	// Bottom Right Of The Quad (Right)
  glEnd();// Done Drawing The Quad
*/
